{"uid":"2b39969a8387f3a4","name":"test_registration","fullName":"Test.test_conduit.TestConduit#test_registration","historyId":"27fbd69bd14469a99efda7e74b17590d","time":{"start":1681026259740,"stop":1681026260593,"duration":853},"status":"failed","statusMessage":"AssertionError: assert 'Registration failed!' == 'Welcome!'\n  - Welcome!\n  + Registration failed!","statusTrace":"self = <test_conduit.TestConduit object at 0x7fcccdcdb150>\n\n    def test_registration(self):\n        print(self.browser.page_source, file=sys.stderr)\n        self.browser.find_element(By.CSS_SELECTOR, 'a[href=\"#/register\"]')\n        signUp_btn = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR,'a[href=\"#/register\"]')))\n        signUp_btn.click()\n    \n        username_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Username\"]')))\n        username_input.send_keys(\"pandacsenke\")\n    \n        email_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Email\"]')))\n        email_input.send_keys(\"testpanda5@gmail.com\")\n    \n        password_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Password\"]')))\n        password_input.send_keys(\"Panda.test123\")\n    \n        sign_up_green_btn = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'button[class=\"btn btn-lg btn-primary pull-xs-right\"]')))\n        sign_up_green_btn.click()\n    \n        welcome = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'div[class=\"swal-title\"]')))\n    \n>       assert welcome.text == \"Welcome!\"\nE       AssertionError: assert 'Registration failed!' == 'Welcome!'\nE         - Welcome!\nE         + Registration failed!\n\nTest/test_conduit.py:53: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestConduit","time":{"start":1681026258525,"stop":1681026259739,"duration":1214},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 'Registration failed!' == 'Welcome!'\n  - Welcome!\n  + Registration failed!","statusTrace":"self = <test_conduit.TestConduit object at 0x7fcccdcdb150>\n\n    def test_registration(self):\n        print(self.browser.page_source, file=sys.stderr)\n        self.browser.find_element(By.CSS_SELECTOR, 'a[href=\"#/register\"]')\n        signUp_btn = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR,'a[href=\"#/register\"]')))\n        signUp_btn.click()\n    \n        username_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Username\"]')))\n        username_input.send_keys(\"pandacsenke\")\n    \n        email_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Email\"]')))\n        email_input.send_keys(\"testpanda5@gmail.com\")\n    \n        password_input = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'input[placeholder=\"Password\"]')))\n        password_input.send_keys(\"Panda.test123\")\n    \n        sign_up_green_btn = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'button[class=\"btn btn-lg btn-primary pull-xs-right\"]')))\n        sign_up_green_btn.click()\n    \n        welcome = WebDriverWait(self.browser, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, 'div[class=\"swal-title\"]')))\n    \n>       assert welcome.text == \"Welcome!\"\nE       AssertionError: assert 'Registration failed!' == 'Welcome!'\nE         - Welcome!\nE         + Registration failed!\n\nTest/test_conduit.py:53: AssertionError","steps":[],"attachments":[{"uid":"420e9c43159c32","name":"stderr","source":"420e9c43159c32.txt","type":"text/plain","size":33650}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestConduit::0","time":{"start":1681026260623,"stop":1681026260678,"duration":55},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"Test"},{"name":"suite","value":"test_conduit"},{"name":"subSuite","value":"TestConduit"},{"name":"host","value":"fv-az305-274"},{"name":"thread","value":"3820-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test.test_conduit"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"2b39969a8387f3a4.json","parameterValues":[]}